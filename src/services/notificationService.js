import { productApi } from '../utils/api'

export const notificationService = {
  // Ïõπ Ìë∏Ïãú ÏïåÎ¶º Í∂åÌïú ÏöîÏ≤≠
  async requestNotificationPermission() {
    if (!('Notification' in window)) {
      console.warn('Ïù¥ Î∏åÎùºÏö∞Ï†ÄÎäî Ïõπ ÏïåÎ¶ºÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§.')
      return false
    }

    const permission = await Notification.requestPermission()
    return permission === 'granted'
  },

  // Ìë∏Ïãú ÏïåÎ¶º ÌëúÏãú
  showNotification(title, options = {}) {
    if (Notification.permission === 'granted') {
      const notification = new Notification(title, {
        icon: '/favicon.ico',
        badge: '/badge-icon.png',
        tag: 'mini-carrot',
        ...options
      })

      // ÏïåÎ¶º ÌÅ¥Î¶≠ Ïãú Ï≤òÎ¶¨
      notification.onclick = (event) => {
        event.preventDefault()
        window.focus()
        if (options.url) {
          window.location.href = options.url
        }
        notification.close()
      }

      // 5Ï¥à ÌõÑ ÏûêÎèô Îã´Í∏∞
      setTimeout(() => notification.close(), 5000)
      
      return notification
    }
    return null
  },

  // ÏÉÅÌíà Í¥ÄÎ†® ÏïåÎ¶º
  showProductNotification(type, product) {
    const notifications = {
      'new_product': {
        title: 'üÜï ÏÉàÎ°úÏö¥ ÏÉÅÌíàÏù¥ Îì±Î°ùÎêòÏóàÏñ¥Ïöî!',
        body: `${product.title} - ${this.formatPrice(product.price)}Ïõê`,
        icon: product.imageUrl || '/images/default-product.svg',
        url: `/products/${product.id}`
      },
      'price_change': {
        title: 'üí∞ Í∞ÄÍ≤©Ïù¥ Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§',
        body: `${product.title} - ${this.formatPrice(product.price)}Ïõê`,
        icon: product.imageUrl || '/images/default-product.svg',
        url: `/products/${product.id}`
      },
      'sold_out': {
        title: 'üî• ÏÉÅÌíàÏù¥ ÌåêÎß§ÎêòÏóàÏäµÎãàÎã§!',
        body: `Ï∂ïÌïòÌï©ÎãàÎã§! "${product.title}"Ïù¥ ÌåêÎß§ÎêòÏóàÏñ¥Ïöî.`,
        icon: product.imageUrl || '/images/default-product.svg',
        url: `/mypage`
      }
    }

    const notification = notifications[type]
    if (notification) {
      this.showNotification(notification.title, {
        body: notification.body,
        icon: notification.icon,
        url: notification.url
      })
    }
  },

  // ÏÇ¨Ïö©Ïûê Í¥ÄÎ†® ÏïåÎ¶º
  showUserNotification(type, data = {}) {
    const notifications = {
      'welcome': {
        title: 'üéâ ÎØ∏Îãà ÎãπÍ∑ºÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§!',
        body: 'Ï≤´ ÏÉÅÌíàÏùÑ Îì±Î°ùÌï¥Î≥¥ÏÑ∏Ïöî.',
        url: '/products/create'
      },
      'profile_updated': {
        title: '‚úÖ ÌîÑÎ°úÌïÑÏù¥ ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§',
        body: 'ÌîÑÎ°úÌïÑ Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ Ï†ÄÏû•ÎêòÏóàÏñ¥Ïöî.',
        url: '/mypage'
      },
      'password_changed': {
        title: 'üîí ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§',
        body: 'Í≥ÑÏ†ï Î≥¥ÏïàÏù¥ ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏñ¥Ïöî.',
        url: '/mypage'
      }
    }

    const notification = notifications[type]
    if (notification) {
      this.showNotification(notification.title, {
        body: notification.body,
        url: notification.url,
        ...data
      })
    }
  },

  // Í∞ÄÍ≤© Ìè¨Îß∑ÌåÖ Ïú†Ìã∏Î¶¨Ìã∞
  formatPrice(price) {
    return new Intl.NumberFormat('ko-KR').format(price)
  }
}

// Server-Sent Events (SSE) ÌÅ¥ÎûòÏä§
export class RealTimeUpdates {
  constructor() {
    this.eventSource = null
    this.listeners = new Map()
    this.reconnectAttempts = 0
    this.maxReconnectAttempts = 5
    this.reconnectDelay = 5000
  }

  // SSE Ïó∞Í≤∞ ÏãúÏûë
  connect() {
    if (this.eventSource) {
      this.eventSource.close()
    }

    try {
      this.eventSource = new EventSource('/api/analytics/stream')
      
      this.eventSource.onopen = () => {
        console.log('Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ïó∞Í≤∞Îê®')
        this.reconnectAttempts = 0
      }

      this.eventSource.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data)
          this.handleMessage(data)
        } catch (error) {
          console.error('SSE Î©îÏãúÏßÄ ÌååÏã± Ïò§Î•ò:', error)
        }
      }

      this.eventSource.onerror = (error) => {
        console.error('SSE Ïó∞Í≤∞ Ïò§Î•ò:', error)
        this.handleReconnect()
      }

    } catch (error) {
      console.error('SSE Ïó∞Í≤∞ Ïã§Ìå®:', error)
      this.handleReconnect()
    }
  }

  // Î©îÏãúÏßÄ Ï≤òÎ¶¨
  handleMessage(data) {
    const { type, ...payload } = data
    
    // Îì±Î°ùÎêú Î¶¨Ïä§ÎÑàÎì§ÏóêÍ≤å Ïù¥Î≤§Ìä∏ Ï†ÑÎã¨
    const listeners = this.listeners.get(type) || []
    listeners.forEach(listener => {
      try {
        listener(payload)
      } catch (error) {
        console.error(`SSE Î¶¨Ïä§ÎÑà Ïò§Î•ò (${type}):`, error)
      }
    })

    // Í∏∞Î≥∏ Ï≤òÎ¶¨
    switch (type) {
      case 'VIEW_COUNT_UPDATE':
        this.updateViewCount(payload.productId, payload.newCount)
        break
      case 'NEW_PRODUCT':
        notificationService.showProductNotification('new_product', payload.product)
        break
      case 'PRICE_CHANGE':
        notificationService.showProductNotification('price_change', payload.product)
        break
      case 'PRODUCT_SOLD':
        notificationService.showProductNotification('sold_out', payload.product)
        break
    }
  }

  // Ïû¨Ïó∞Í≤∞ Ï≤òÎ¶¨
  handleReconnect() {
    if (this.reconnectAttempts < this.maxReconnectAttempts) {
      this.reconnectAttempts++
      console.log(`SSE Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ ${this.reconnectAttempts}/${this.maxReconnectAttempts}`)
      
      setTimeout(() => {
        this.connect()
      }, this.reconnectDelay)
    } else {
      console.error('SSE Ïû¨Ïó∞Í≤∞ Ìè¨Í∏∞')
    }
  }

  // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù
  addEventListener(type, listener) {
    if (!this.listeners.has(type)) {
      this.listeners.set(type, [])
    }
    this.listeners.get(type).push(listener)
  }

  // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞
  removeEventListener(type, listener) {
    const listeners = this.listeners.get(type) || []
    const index = listeners.indexOf(listener)
    if (index > -1) {
      listeners.splice(index, 1)
    }
  }

  // Ïã§ÏãúÍ∞Ñ Ï°∞ÌöåÏàò ÏóÖÎç∞Ïù¥Ìä∏
  updateViewCount(productId, newCount) {
    const elements = document.querySelectorAll(`[data-product-id="${productId}"] .view-count`)
    elements.forEach(element => {
      element.textContent = `üëÅÔ∏è ${newCount.toLocaleString()}`
      
      // Ïï†ÎãàÎ©îÏù¥ÏÖò Ìö®Í≥º
      element.classList.add('view-count-updated')
      setTimeout(() => element.classList.remove('view-count-updated'), 1000)
    })
  }

  // Ïó∞Í≤∞ Ï¢ÖÎ£å
  disconnect() {
    if (this.eventSource) {
      this.eventSource.close()
      this.eventSource = null
    }
    this.listeners.clear()
  }
}

// Ï†ÑÏó≠ Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ïù∏Ïä§ÌÑ¥Ïä§
export const globalRealTimeUpdates = typeof window !== 'undefined' ? new RealTimeUpdates() : null 